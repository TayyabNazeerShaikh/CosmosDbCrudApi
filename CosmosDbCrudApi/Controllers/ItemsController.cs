// Controllers/ItemsController.cs
using CosmosDbCrudApi.Models;
using CosmosDbCrudApi.Services;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CosmosDbCrudApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ItemsController : ControllerBase
    {
        private readonly ICosmosDbService _cosmosDbService;

        public ItemsController(ICosmosDbService cosmosDbService)
        {
            _cosmosDbService = cosmosDbService;
        }

        // GET: api/Items
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Item>>> GetItems([FromQuery] string? category)
        {
            // Example: Filter by category (which is our partitionKey in this example)
            // For a general query, you might use "SELECT * FROM c"
            // Be cautious with cross-partition queries in production for performance.
            var query = "SELECT * FROM c";
            if (!string.IsNullOrEmpty(category))
            {
                query += $" WHERE c.partitionKey = '{category}'"; // Basic example, consider parameterizing
            }
            var items = await _cosmosDbService.GetItemsAsync(query);
            return Ok(items);
        }

        // GET: api/Items/{id}?partitionKey={partitionKey}
        [HttpGet("{id}")]
        public async Task<ActionResult<Item>> GetItem(string id, [FromQuery] string partitionKey)
        {
            if (string.IsNullOrEmpty(partitionKey))
            {
                return BadRequest("PartitionKey query parameter is required.");
            }
            var item = await _cosmosDbService.GetItemAsync(id, partitionKey);
            if (item == null)
            {
                return NotFound();
            }
            return Ok(item);
        }

        // POST: api/Items
        [HttpPost]
        public async Task<ActionResult<Item>> CreateItem([FromBody] Item item)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            // If Id is not set by client, it will be auto-generated by the model's default
            // If PartitionKey is not set by client, it will use the model's default
            await _cosmosDbService.AddItemAsync(item);
            // Return CreatedAtAction to provide the location of the new resource
            return CreatedAtAction(nameof(GetItem), new { id = item.Id, partitionKey = item.PartitionKey }, item);
        }

        // PUT: api/Items/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateItem(string id, [FromBody] Item item)
        {
            if (id != item.Id)
            {
                return BadRequest("ID mismatch.");
            }
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Check if item exists (optional, Upsert handles it but you might want specific logic)
            var existingItem = await _cosmosDbService.GetItemAsync(id, item.PartitionKey);
            if (existingItem == null)
            {
                return NotFound($"Item with id {id} and partitionKey {item.PartitionKey} not found.");
            }

            await _cosmosDbService.UpdateItemAsync(id, item);
            return NoContent(); // Standard response for a successful PUT
        }

        // DELETE: api/Items/{id}?partitionKey={partitionKey}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteItem(string id, [FromQuery] string partitionKey)
        {
            if (string.IsNullOrEmpty(partitionKey))
            {
                return BadRequest("PartitionKey query parameter is required.");
            }
            var item = await _cosmosDbService.GetItemAsync(id, partitionKey);
            if (item == null)
            {
                return NotFound();
            }
            await _cosmosDbService.DeleteItemAsync(id, partitionKey);
            return NoContent(); // Standard response for a successful DELETE
        }
    }
}